name: Publish .NET 8 Desktop App
on:
  push:
    branches: [ "main" ]
    tags:
      - "v*"
permissions:
  contents: write
jobs:
  build:
    strategy:
      matrix:
        include:
          - os: windows-latest
            platform: win
            arch: x64
          - os: ubuntu-latest
            platform: linux
            arch: x64
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v3
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 8.0.x
    - name: Cache .NET dependencies
      uses: actions/cache@v3
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
        restore-keys: |
          ${{ runner.os }}-nuget-
    - name: Publish
      run: dotnet publish ./CalculatorAvalonia/CalculatorAvalonia.csproj --configuration Release --runtime ${{ matrix.platform }}-${{ matrix.arch }} --self-contained true --output ./publish
    - name: Create portable artifact
      run: |
        if ("${{ matrix.os }}" -eq "windows-latest") {
          Compress-Archive -Path ./publish/* -DestinationPath ./CalculatorAvalonia-portable-${{ matrix.platform }}-${{ matrix.arch }}.zip
        } else {
          zip -r ./CalculatorAvalonia-portable-${{ matrix.platform }}-${{ matrix.arch }}.zip ./publish
        }
      shell: pwsh
    - name: Copy icon file
      if: matrix.os == 'windows-latest'
      run: |
        Copy-Item "./CalculatorAvalonia/Assets/icon.ico" -Destination "./publish/icon.ico"
      shell: pwsh
    - name: Create NSIS installer (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        # Install NSIS
        choco install nsis -y
        if (-not (Test-Path "C:\Program Files (x86)\NSIS\makensis.exe")) {
          Write-Error "NSIS installation failed"
          exit 1
        }
        
        # Create NSIS script (installer.nsi)
        $nsisScript = @'
        !include "MUI2.nsh"
        Name "CalculatorAvalonia"
        OutFile "CalculatorAvalonia-installer-${{ matrix.platform }}-${{ matrix.arch }}.exe"
        InstallDir "$PROGRAMFILES64\CalculatorAvalonia"
        !define MUI_ICON "$INSTDIR\icon.ico"
        !define MUI_UNICON "$INSTDIR\icon.ico"
        !insertmacro MUI_PAGE_WELCOME
        !insertmacro MUI_PAGE_DIRECTORY
        !insertmacro MUI_PAGE_INSTFILES
        !insertmacro MUI_PAGE_FINISH
        !insertmacro MUI_UNPAGE_WELCOME
        !insertmacro MUI_UNPAGE_CONFIRM
        !insertmacro MUI_UNPAGE_INSTFILES
        !insertmacro MUI_UNPAGE_FINISH
        !insertmacro MUI_LANGUAGE "English"
        Section
          SetOutPath $INSTDIR
          File /r "publish\*.*"
          CreateShortcut "$SMPROGRAMS\CalculatorAvalonia\CalculatorAvalonia.lnk" "$INSTDIR\CalculatorAvalonia.exe" "" "$INSTDIR\icon.ico"
          CreateShortcut "$DESKTOP\CalculatorAvalonia.lnk" "$INSTDIR\CalculatorAvalonia.exe" "" "$INSTDIR\icon.ico"
          WriteRegStr HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\CalculatorAvalonia" "DisplayName" "CalculatorAvalonia"
          WriteRegStr HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\CalculatorAvalonia" "UninstallString" "$INSTDIR\Uninstall.exe"
          WriteRegStr HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\CalculatorAvalonia" "DisplayIcon" "$INSTDIR\icon.ico"
          WriteUninstaller "$INSTDIR\Uninstall.exe"
        SectionEnd
        Section "Uninstall"
          Delete "$SMPROGRAMS\CalculatorAvalonia\CalculatorAvalonia.lnk"
          Delete "$DESKTOP\CalculatorAvalonia.lnk"
          RMDir /r "$INSTDIR"
          DeleteRegKey HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\CalculatorAvalonia"
        SectionEnd
        '@
        $nsisScript | Out-File -Encoding ASCII installer.nsi
        
        # Build installer
        & "C:\Program Files (x86)\NSIS\makensis.exe" installer.nsi
        
        if (-not (Test-Path "CalculatorAvalonia-installer-${{ matrix.platform }}-${{ matrix.arch }}.exe")) {
          Write-Error "Installer creation failed"
          exit 1
        }
        
        Write-Output "Installer created successfully"
      shell: pwsh
    - name: Upload portable artifact
      uses: actions/upload-artifact@v3
      with:
        name: portable-${{ matrix.platform }}-${{ matrix.arch }}
        path: ./CalculatorAvalonia-portable-${{ matrix.platform }}-${{ matrix.arch }}.zip
    - name: Upload installer artifact (Windows)
      if: matrix.os == 'windows-latest'
      uses: actions/upload-artifact@v3
      with:
        name: installer-${{ matrix.platform }}-${{ matrix.arch }}
        path: ./CalculatorAvalonia-installer-${{ matrix.platform }}-${{ matrix.arch }}.exe

  create-release:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags/')
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    - name: Download artifacts
      uses: actions/download-artifact@v3
    - name: Create Release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Create the release
        release_output=$(gh release create ${{ github.ref_name }} --title "Release ${{ github.ref_name }}" --generate-notes)
        echo "Release created: $release_output"
        
        # Upload only zip and exe files to the release
        for file in ./*/*; do
          if [[ -f "$file" && ($file == *.zip || $file == *.exe) ]]; then
            echo "Uploading $file to release..."
            gh release upload ${{ github.ref_name }} "$file" --clobber
          fi
        done
      shell: bash